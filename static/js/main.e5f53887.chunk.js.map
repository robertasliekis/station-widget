{"version":3,"sources":["css/App.module.css","css/Widget.module.css","css/Station.module.css","components/Station.tsx","components/StationsWidget.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Station","station","stationIndex","onStationChange","activeStation","stationDisplayClass","stationOpenIndex","styles","stationDisplayHidden","className","container","stationDisplay","buttonMinus","stationImage","style","backgroundImage","image","buttonPlus","stationInfo","onClick","name","frequency","StationsWidget","useState","stations","setStations","loading","setLoading","error","setError","setActiveStation","widgetOpen","setWidgetOpen","useEffect","axios","get","then","response","data","catch","err","stationChange","stationData","widgetCloseClass","widgetClosed","topSection","buttonBack","buttonClose","middleSection","loadingText","map","index","bottomSection","text","yellowText","stationPlaying","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.e5f53887.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3DBuK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Widget_container__2kyes\",\"topSection\":\"Widget_topSection__1jpsu\",\"buttonBack\":\"Widget_buttonBack__3MtOA\",\"buttonClose\":\"Widget_buttonClose__XXv5k\",\"middleSection\":\"Widget_middleSection__2wzf7\",\"loadingText\":\"Widget_loadingText__d-nyV\",\"widgetClosed\":\"Widget_widgetClosed__2o8Hd\",\"bottomSection\":\"Widget_bottomSection__1P3I9\",\"text\":\"Widget_text__1r5Tf\",\"yellowText\":\"Widget_yellowText__2HabG\",\"stationPlaying\":\"Widget_stationPlaying__30K66\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Station_container__27-ou\",\"stationDisplay\":\"Station_stationDisplay__2xPG_\",\"buttonMinus\":\"Station_buttonMinus__1OhVq\",\"buttonPlus\":\"Station_buttonPlus__3bBs-\",\"stationImage\":\"Station_stationImage__-YsPI\",\"stationDisplayHidden\":\"Station_stationDisplayHidden__3PnRD\",\"stationInfo\":\"Station_stationInfo__3PmRV\",\"frequency\":\"Station_frequency__29vg9\"};","import React from \"react\";\r\nimport { stationInterface } from \"./StationsWidget\";\r\nimport { activeStationInterface } from \"./StationsWidget\";\r\n\r\nimport styles from \"../css/Station.module.css\";\r\n\r\ninterface Props {\r\n  station: stationInterface;\r\n  stationIndex: number;\r\n  onStationChange: (stationData: activeStationInterface) => void;\r\n  activeStation: activeStationInterface;\r\n}\r\n\r\nconst Station: React.FC<Props> = ({ station, stationIndex, onStationChange, activeStation }) => {\r\n  const stationContainerClicked = () => {\r\n    if (activeStation.stationOpenIndex === stationIndex) {\r\n      onStationChange({ stationOpenIndex: null });\r\n    } else {\r\n      onStationChange({ stationOpenIndex: stationIndex });\r\n    }\r\n  };\r\n\r\n  const stationDisplayClass = activeStation.stationOpenIndex === stationIndex ? \"\" : styles.stationDisplayHidden;\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={`${styles.stationDisplay} ${stationDisplayClass}`}>\r\n        <button className={styles.buttonMinus}></button>\r\n        <div className={styles.stationImage} style={{ backgroundImage: `url(\"./images/${station.image}\")` }}></div>\r\n        <button className={styles.buttonPlus}></button>\r\n      </div>\r\n      <div\r\n        className={styles.stationInfo}\r\n        onClick={() => {\r\n          stationContainerClicked();\r\n        }}\r\n      >\r\n        <p className={styles.name}>{station.name}</p>\r\n        <p className={styles.frequency}>{station.frequency}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Station;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Station from \"./Station\";\r\nimport styles from \"../css/Widget.module.css\";\r\n\r\nexport interface stationInterface {\r\n  name: string;\r\n  frequency: string;\r\n  image: string;\r\n}\r\n\r\nexport interface activeStationInterface {\r\n  stationOpenIndex: null | number;\r\n}\r\n\r\nconst StationsWidget: React.FC = () => {\r\n  const [stations, setStations] = useState<stationInterface[]>();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string>(\"\");\r\n\r\n  const [activeStation, setActiveStation] = useState<activeStationInterface>({ stationOpenIndex: null });\r\n  const [widgetOpen, setWidgetOpen] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    const stationsUrl = \"./data/stations.json\";\r\n    axios\r\n      .get<stationInterface[]>(stationsUrl)\r\n      .then((response) => {\r\n        setStations(response.data);\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        setError(err);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const stationChange = (stationData: activeStationInterface) => {\r\n    setActiveStation(stationData);\r\n  };\r\n\r\n  const buttonBackClicked = () => {\r\n    setActiveStation({ stationOpenIndex: null });\r\n  };\r\n\r\n  const buttonCloseClicked = () => {\r\n    setWidgetOpen(!widgetOpen);\r\n  };\r\n\r\n  const widgetCloseClass = widgetOpen ? \"\" : styles.widgetClosed;\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.topSection}>\r\n        <button className={styles.buttonBack} onClick={() => buttonBackClicked()}></button>\r\n        <p>STATIONS</p>\r\n        <button className={styles.buttonClose} onClick={() => buttonCloseClicked()}></button>\r\n      </div>\r\n      <div className={`${styles.middleSection} ${widgetCloseClass}`}>\r\n        {loading && <h1 className={styles.loadingText}>Loading...</h1>}\r\n        {error && <h1 className={styles.loadingText}>{error}</h1>}\r\n        {stations &&\r\n          stations.map((station, index) => (\r\n            <Station\r\n              key={index}\r\n              stationIndex={index}\r\n              station={{ name: station.name, frequency: station.frequency, image: station.image }}\r\n              onStationChange={stationChange}\r\n              activeStation={activeStation}\r\n            />\r\n          ))}\r\n      </div>\r\n      <div className={styles.bottomSection}>\r\n        {activeStation.stationOpenIndex !== null ? (\r\n          <div className={styles.text}>\r\n            <p className={styles.yellowText}>CURRENTLY PLAYING</p>\r\n            <p className={styles.stationPlaying}>{stations && stations[activeStation.stationOpenIndex].name}</p>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StationsWidget;\r\n","import React from \"react\";\nimport styles from \"./css/App.module.css\";\n\nimport StationsWidget from \"./components/StationsWidget\";\n\n//\"homepage\": \"https://robertasliekis.github.io/station-widget/\",\n\nconst App = () => {\n  return (\n    <div className={styles.container}>\n      <StationsWidget />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}